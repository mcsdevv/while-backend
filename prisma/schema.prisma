generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["nApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id
  email     String    @default("")
  name      String    @default("")
  picture   String    @default("")
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  agendas   Agenda[]
  contacts  Contact[]
  meetings  Meeting[]
  notes     Note[]
  tasks     Task[]
}

model Meeting {
  id        String    @id @default(uuid())
  creatorId String    @map("creator_id")
  contactId String?   @map("contact_id")
  date      DateTime?
  endTime   DateTime? @map("end_time")
  startTime DateTime? @map("start_time")
  title     String
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  creator   User      @relation(fields: [creatorId], references: [id])
  contact   Contact?  @relation(fields: [contactId], references: [id])
  agendas   Agenda[]
  notes     Note[]
  tasks     Task[]
}

model Contact {
  id        String    @id @default(uuid())
  creatorId String    @map("creator_id")
  email     String    @default("")
  name      String    @default("")
  picture   String?   @default("")
  company   String?   @default("")
  position  String?   @default("")
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  creator   User      @relation(fields: [creatorId], references: [id])
  meetings  Meeting[]
}

model Agenda {
  id        String    @id @default(uuid())
  creatorId String    @map("creator_id")
  meetingId String    @map("meeting_id")
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  creator   User      @relation(fields: [creatorId], references: [id])
  meeting   Meeting   @relation(fields: [meetingId], references: [id])
}

model Note {
  id        String    @id @default(uuid())
  creatorId String    @map("creator_id")
  meetingId String    @map("meeting_id")
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  creator   User      @relation(fields: [creatorId], references: [id])
  meeting   Meeting   @relation(fields: [meetingId], references: [id])
}

model Task {
  id        String    @id @default(uuid())
  completed Boolean   @default(false)
  creatorId String    @map("creator_id")
  meetingId String    @map("meeting_id")
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  creator   User      @relation(fields: [creatorId], references: [id])
  meeting   Meeting   @relation(fields: [meetingId], references: [id])
}
